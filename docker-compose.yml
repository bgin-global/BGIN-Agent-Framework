version: '3.8'

services:
  # Core Database Services
  postgres:
    image: pgvector/pgvector:pg15
    container_name: bgin-postgres
    environment:
      POSTGRES_DB: bgin_mvp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - bgin-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: bgin-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
    networks:
      - bgin-network
    restart: unless-stopped

  # Vector Database for RAG
  qdrant:
    image: qdrant/qdrant:v1.5.0
    container_name: bgin-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    networks:
      - bgin-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: bgin-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-password}@postgres:5432/bgin_mvp
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispass}@redis:6379
      VECTOR_DB_URL: http://qdrant:6333
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-dev-encryption-key-32-characters}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DISCOURSE_API_KEY: ${DISCOURSE_API_KEY}
      ANONYMIZATION_SALT: ${ANONYMIZATION_SALT:-dev-anonymization-salt}
      LOG_LEVEL: debug
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - bgin-network
    restart: unless-stopped
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: bgin-frontend
    environment:
      VITE_API_URL: http://localhost:4000
      VITE_WS_URL: ws://localhost:4000
      VITE_DISCOURSE_URL: ${DISCOURSE_URL:-https://discourse.bgin.org}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - bgin-network
    restart: unless-stopped
    command: npm run dev

  # Monitoring Services (Optional for Development)
  prometheus:
    image: prom/prometheus:latest
    container_name: bgin-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - bgin-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: bgin-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - bgin-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    name: bgin_postgres_data
  redis_data:
    name: bgin_redis_data
  qdrant_data:
    name: bgin_qdrant_data
  prometheus_data:
    name: bgin_prometheus_data
  grafana_data:
    name: bgin_grafana_data
  backend_uploads:
    name: bgin_backend_uploads

networks:
  bgin-network:
    name: bgin_network
    driver: bridge

# Development Quick Commands:
# docker-compose up -d                    # Start all core services
# docker-compose --profile monitoring up  # Start with monitoring
# docker-compose logs -f backend          # Follow backend logs
# docker-compose exec postgres psql -U postgres -d bgin_mvp # Connect to DB